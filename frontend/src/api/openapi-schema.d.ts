/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/vehicle/etc-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 차량 등록 기타 정보 업데이트
         * @description 차량 등록 ID와 사용자 ID를 기반으로 차량 등록의 기타 정보를 업데이트합니다.
         */
        put: operations["updateRegisteredVehicleEtcInfo"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vehicle/basic-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 차량 등록 기본 정보 업데이트
         * @description 차량 등록 ID와 사용자 ID를 기반으로 차량 등록의 기본 정보를 업데이트합니다.
         */
        put: operations["updateRegisteredVehicleBasicInfo"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vehicle/create-empty": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 비어있는 차량 등록 생성
         * @description 사용자의 ID를 기반으로 비어있는 차량 등록을 생성합니다.
         */
        post: operations["createEmptyRegisteredVehicle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 회원가입 */
        post: operations["sginupUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/file/photos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 차량 사진 조회
         * @description 사용자의 차량 ID를 기반으로 등록된 차량 사진 목록을 조회합니다.
         */
        get: operations["findRegisteredVehiclePhotos"];
        put?: never;
        /**
         * 차량 사진 업로드
         * @description 사용자의 차량 ID를 기반으로 차량 사진을 업로드합니다.
         */
        post: operations["uploadRegisteredVehiclePhoto"];
        /**
         * 차량 사진 삭제
         * @description 사용자의 차량 ID와 사진 ID를 기반으로 등록된 차량 사진을 삭제합니다.
         */
        delete: operations["deleteRegisteredVehiclePhoto"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/file/certificates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 차량 등록증 조회
         * @description 사용자의 차량 ID를 기반으로 등록된 차량 등록증 목록을 조회합니다.
         */
        get: operations["findVehicleRegistrationCertificates"];
        put?: never;
        /**
         * 차량 등록증 업로드
         * @description 사용자의 차량 ID를 기반으로 차량 등록증을 업로드합니다.
         */
        post: operations["uploadVehicleRegistrationCertificate"];
        /**
         * 차량 등록증 삭제
         * @description 사용자의 차량 ID와 등록증 ID를 기반으로 등록된 차량 등록증을 삭제합니다.
         */
        delete: operations["deleteVehicleRegistrationCertificate"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/token-refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 토큰 갱신 */
        post: operations["refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그아웃 */
        post: operations["signout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그인 */
        post: operations["signin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vehicle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 차량 등록 상세 조회
         * @description 차량 등록 ID를 기반으로 차량 등록의 상세 정보를 조회합니다.
         */
        get: operations["getRegisteredVehicle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vehicle/in-progress-cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 미완성 차량 등록 카드 조회
         * @description 사용자가 미완성 상태로 남긴 차량 등록 카드 목록을 조회합니다.
         */
        get: operations["getRegisterVehicleInProgressCard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/check-username": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** username 중복 체크 */
        get: operations["checkUsername"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/main/registered-vehicles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findRegisteredVehicleCardsByCondition"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/main/latest-registered-vehicles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findLatestRegisteredVehicles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/main/high-price-vehicles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findHighPriceVehicles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vehicle/in-progress-card": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 미완성 차량 등록 카드 삭제
         * @description 사용자가 미완성 상태로 남긴 차량 등록 카드를 삭제합니다.
         */
        delete: operations["deleteRegisterVehicleInProgressCard"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        VehicleRegistrationEtcInfoRequest: {
            /** @enum {string} */
            driveType?: "TWO_WD" | "FOUR_WD" | "AWD" | "FF" | "FR" | "MR" | "RMR" | "RR" | "RWD" | "OTHER";
            /** @enum {string} */
            transmission?: "AUTOMATIC" | "MANUAL" | "OTHER";
            /** @enum {string} */
            color?: "WHITE" | "BLACK" | "PEARL" | "SILVER" | "GRAY" | "CHARCOAL" | "NAVY" | "RED" | "YELLOW" | "GREEN" | "BLUE" | "LIGHT_GOLD" | "BROWN" | "GOLD" | "SKY_BLUE" | "TURQUOISE" | "LIGHT_GREEN" | "PINK" | "ORANGE" | "OTHER";
            /** Format: date */
            initialRegistrationDate?: string;
            /** @enum {string} */
            specialUseHistory?: "RENTAL" | "COMMERCIAL" | "OFFICIAL" | "OTHER";
            /** @enum {string} */
            specialModificationHistory?: "FUEL_MODIFICATION" | "SEAT_MODIFICATION" | "ENGINE_MODIFICATION" | "OTHER";
            /** @enum {string} */
            optionInfo?: "SUNROOF" | "SIDE_STEP" | "SMART_KEY" | "OTHER";
        };
        VehicleRegistrationBasicInfoRequest: {
            /** @enum {string} */
            manufacturer?: "KIA" | "HYUNDAI" | "GENESIS" | "CHEVROLET" | "RENAULT_KOREA" | "KG_MOBILITY" | "OTHER";
            /** @enum {string} */
            vehicleType?: "CAR" | "TRUCK" | "BUS" | "MOTORCYCLE" | "OTHER";
            /** Format: int32 */
            displacement?: number;
            /** Format: int32 */
            seaterCount?: number;
            /** @enum {string} */
            fuelType?: "DIESEL" | "GASOLINE" | "LPG" | "ELECTRIC" | "HYBRID" | "OTHER";
            vehicleCode?: string;
            vehicleNumber?: string;
            /** @enum {string} */
            manufactureCountry?: "KOREA" | "USA" | "GERMANY" | "JAPAN" | "OTHER";
            vehicleGrade?: string;
            /** Format: int32 */
            releasePrice?: number;
            /** Format: int32 */
            mileage?: number;
            /** Format: int32 */
            releaseYear?: number;
            /** Format: int32 */
            manufactureYear?: number;
            accidentInfo?: ("NONE" | "TOTAL_LOSS" | "SUBMERGED" | "STOLEN" | "OTHER")[];
            /** @enum {string} */
            repainted?: "NOT_REPAINTED" | "REPAINTED_WITH_SIMPLE" | "REPAINTED_WITH_BODYWORK" | "REPAINTED_WITH_RESTORATION" | "OTHER";
        };
        UserSignupRequest: {
            username: string;
            password: string;
        };
        TokenRefreshRequest: {
            refreshToken: string;
        };
        TokenRefreshResponse: {
            accessToken?: string;
            refreshToken?: string;
        };
        SignoutRequest: {
            accessToken?: string;
            refreshToken?: string;
        };
        SigninRequest: {
            username: string;
            password: string;
        };
        SigninResponse: {
            accessToken?: string;
            refreshToken?: string;
            username?: string;
        };
        RegisteredVehicle: {
            /** Format: int64 */
            id?: number;
            /** @enum {string} */
            manufacturer?: "KIA" | "HYUNDAI" | "GENESIS" | "CHEVROLET" | "RENAULT_KOREA" | "KG_MOBILITY" | "OTHER";
            /** @enum {string} */
            vehicleType?: "CAR" | "TRUCK" | "BUS" | "MOTORCYCLE" | "OTHER";
            /** Format: int32 */
            displacement?: number;
            /** Format: int32 */
            seaterCount?: number;
            /** @enum {string} */
            fuelType?: "DIESEL" | "GASOLINE" | "LPG" | "ELECTRIC" | "HYBRID" | "OTHER";
            vehicleCode?: string;
            vehicleNumber?: string;
            /** @enum {string} */
            manufactureCountry?: "KOREA" | "USA" | "GERMANY" | "JAPAN" | "OTHER";
            vehicleGrade?: string;
            /** Format: int32 */
            releasePrice?: number;
            /** Format: int32 */
            mileage?: number;
            /** Format: int32 */
            releaseYear?: number;
            /** Format: int32 */
            manufactureYear?: number;
            accidentInfo?: ("NONE" | "TOTAL_LOSS" | "SUBMERGED" | "STOLEN" | "OTHER")[];
            /** @enum {string} */
            repainted?: "NOT_REPAINTED" | "REPAINTED_WITH_SIMPLE" | "REPAINTED_WITH_BODYWORK" | "REPAINTED_WITH_RESTORATION" | "OTHER";
            /** @enum {string} */
            driveType?: "TWO_WD" | "FOUR_WD" | "AWD" | "FF" | "FR" | "MR" | "RMR" | "RR" | "RWD" | "OTHER";
            /** @enum {string} */
            transmission?: "AUTOMATIC" | "MANUAL" | "OTHER";
            /** @enum {string} */
            color?: "WHITE" | "BLACK" | "PEARL" | "SILVER" | "GRAY" | "CHARCOAL" | "NAVY" | "RED" | "YELLOW" | "GREEN" | "BLUE" | "LIGHT_GOLD" | "BROWN" | "GOLD" | "SKY_BLUE" | "TURQUOISE" | "LIGHT_GREEN" | "PINK" | "ORANGE" | "OTHER";
            /** Format: date */
            initialRegistrationDate?: string;
            /** @enum {string} */
            specialUseHistory?: "RENTAL" | "COMMERCIAL" | "OFFICIAL" | "OTHER";
            /** @enum {string} */
            specialModificationHistory?: "FUEL_MODIFICATION" | "SEAT_MODIFICATION" | "ENGINE_MODIFICATION" | "OTHER";
            /** @enum {string} */
            optionInfo?: "SUNROOF" | "SIDE_STEP" | "SMART_KEY" | "OTHER";
            vehicleRegistrationCertificates?: components["schemas"]["VehicleRegistrationCertificate"][];
            registeredVehiclePhotos?: components["schemas"]["RegisteredVehiclePhoto"][];
            /** Format: int32 */
            sellingPrice?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        RegisteredVehiclePhoto: {
            /** Format: int64 */
            id?: number;
            registeredVehicle?: components["schemas"]["RegisteredVehicle"];
            filePath?: string;
            fileName?: string;
            /** Format: int64 */
            fileSize?: number;
            fileContentType?: string;
            fileUrl?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        VehicleRegistrationCertificate: {
            /** Format: int64 */
            id?: number;
            registeredVehicle?: components["schemas"]["RegisteredVehicle"];
            filePath?: string;
            fileName?: string;
            /** Format: int64 */
            fileSize?: number;
            fileContentType?: string;
            fileUrl?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        RegisterVehicleInProgressCardResponse: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            usersId?: number;
            username?: string;
            /** Format: int32 */
            progressStep?: number;
            /** Format: int32 */
            progressTotalSteps?: number;
            /** @enum {string} */
            manufacturer?: "KIA" | "HYUNDAI" | "GENESIS" | "CHEVROLET" | "RENAULT_KOREA" | "KG_MOBILITY" | "OTHER";
            /** Format: int32 */
            releaseYear?: number;
            /** Format: int32 */
            mileage?: number;
            /** Format: int32 */
            price?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        UsernameCheckResponse: {
            available?: boolean;
            message?: string;
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
        PageRegisteredVehicleCardResponse: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["RegisteredVehicleCardResponse"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            pageable?: components["schemas"]["PageableObject"];
            /** Format: int32 */
            numberOfElements?: number;
            empty?: boolean;
        };
        PageableObject: {
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            paged?: boolean;
            unpaged?: boolean;
        };
        RegisteredVehicleCardResponse: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            usersId?: number;
            username?: string;
            /** @enum {string} */
            manufacturer?: "KIA" | "HYUNDAI" | "GENESIS" | "CHEVROLET" | "RENAULT_KOREA" | "KG_MOBILITY" | "OTHER";
            /** Format: int32 */
            releaseYear?: number;
            /** Format: int32 */
            mileage?: number;
            /** Format: int32 */
            price?: number;
            thumbnailUrl?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        SortObject: {
            empty?: boolean;
            unsorted?: boolean;
            sorted?: boolean;
        };
        RegisteredVehicleFileSummaryResponse: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            registeredVehicleId?: number;
            filePath?: string;
            fileName?: string;
            fileUrl?: string;
            /** Format: int64 */
            fileSize?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    updateRegisteredVehicleEtcInfo: {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VehicleRegistrationEtcInfoRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateRegisteredVehicleBasicInfo: {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VehicleRegistrationBasicInfoRequest"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createEmptyRegisteredVehicle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": number;
                };
            };
        };
    };
    sginupUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserSignupRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    findRegisteredVehiclePhotos: {
        parameters: {
            query: {
                vehicleId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegisteredVehicleFileSummaryResponse"][];
                };
            };
        };
    };
    uploadRegisteredVehiclePhoto: {
        parameters: {
            query: {
                vehicleId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteRegisteredVehiclePhoto: {
        parameters: {
            query: {
                photoId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findVehicleRegistrationCertificates: {
        parameters: {
            query: {
                vehicleId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegisteredVehicleFileSummaryResponse"][];
                };
            };
        };
    };
    uploadVehicleRegistrationCertificate: {
        parameters: {
            query: {
                vehicleId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteVehicleRegistrationCertificate: {
        parameters: {
            query: {
                certificateId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefreshRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TokenRefreshResponse"];
                };
            };
        };
    };
    signout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignoutRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    signin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SigninRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["SigninResponse"];
                };
            };
        };
    };
    getRegisteredVehicle: {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegisteredVehicle"];
                };
            };
        };
    };
    getRegisterVehicleInProgressCard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegisterVehicleInProgressCardResponse"][];
                };
            };
        };
    };
    checkUsername: {
        parameters: {
            query: {
                username: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UsernameCheckResponse"];
                };
            };
        };
    };
    findRegisteredVehicleCardsByCondition: {
        parameters: {
            query: {
                noAccident: boolean;
                noPaint: boolean;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PageRegisteredVehicleCardResponse"];
                };
            };
        };
    };
    findLatestRegisteredVehicles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegisteredVehicleCardResponse"][];
                };
            };
        };
    };
    findHighPriceVehicles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RegisteredVehicleCardResponse"][];
                };
            };
        };
    };
    deleteRegisterVehicleInProgressCard: {
        parameters: {
            query: {
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
